<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coursework on Ritarka Samanta</title>
    <link>http://example.org/docs/experience/coursework/</link>
    <description>Recent content in Coursework on Ritarka Samanta</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://example.org/docs/experience/coursework/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://example.org/docs/experience/coursework/compilers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/experience/coursework/compilers/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Algorithms</title>
      <link>http://example.org/docs/experience/coursework/algos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/experience/coursework/algos/</guid>
      <description>Algorithms #  This included two classes, CS 1332 (Data Structures and Algorithms) and CS 3510 (Design and Analysis of Algorithms).
Data Structures and Algorithms #  This was quite an interesting class, and I learned about all the basic data structrures like queues, stacks, heaps, AVLs, hash maps, and more; along with common sorting and graph algorithms.
The class centered around learning about some concept and immediately implementing it as a homework in Java.</description>
    </item>
    
    <item>
      <title>Computer Architecture</title>
      <link>http://example.org/docs/experience/coursework/comp_arch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/experience/coursework/comp_arch/</guid>
      <description>Computer Architecture #  To paraphrase the course descriptions: At the end, I understood everything that happened to computer hardware from the time the power button was pressed.
We covered all sorts of topics:
 Pipelined processors and hazards Memory Hierarchy and Cache Types Multi-threading Multi-processor coherence IO and Storage Basic Networking  I took a total of 3 classes in this area, ECE 3058 (Computer Architecture), CS 3220 (Processor Design), and CS 4290 (Advanced COmputer Architecture).</description>
    </item>
    
    <item>
      <title>Embedded Systems</title>
      <link>http://example.org/docs/experience/coursework/embedded/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/experience/coursework/embedded/</guid>
      <description>Embedded Systems #  I took a few courses on this topic, but never felt this to be too difficult. My experince in this has been limited to microcontrollers, breadboarded circuits, and the ocassional FPGA.
For this reason, things followed a pretty set pattern:
 Read the datasheet Wire up hardware Write code Profit  Working with FPGAs and microcontrollers does have the benefit of being more demonstrable than others. The joys of dynamic programming might be lost on your grandmother, everyone understands blinking LEDs.</description>
    </item>
    
    <item>
      <title>Systems</title>
      <link>http://example.org/docs/experience/coursework/os/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/experience/coursework/os/</guid>
      <description>Systems #  I took two courses on systems, CS 3210 (Operating Systems) and CS 4210 (Advanced Operating Systems). In the former we went deep into the design of operating systems, but in the latter we took a larger view and tackled computer systems in general.
In OS the projects involved with a Unix like OS called xv6: a unix inspired OS created by MIT for teaching.</description>
    </item>
    
  </channel>
</rss>
